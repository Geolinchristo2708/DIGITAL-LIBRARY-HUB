-- Create a view for books with more than 3 copies available
CREATE VIEW vw_books_with_more_than_3_copies AS
SELECT book_copies_BookID
FROM tbl_book_copies
WHERE book_copies_No_Of_Copies > 3;

-- Create a view for books in the 'Harry Potter' series
CREATE VIEW vw_harry_potter_books AS
SELECT book_BookID
FROM tbl_book
WHERE book_Title LIKE 'Harry Potter%';

-- Set delimiter for trigger definition
DELIMITER $$

-- Trigger to update book copies when a book is borrowed
CREATE TRIGGER update_book_copies_on_borrow
AFTER INSERT ON tbl_book_loans
FOR EACH ROW
BEGIN
    -- Ensure copies do not go below zero
    IF (SELECT book_copies_No_Of_Copies FROM tbl_book_copies 
        WHERE book_copies_BookID = NEW.book_loans_BookID
        AND book_copies_BranchID = NEW.book_loans_BranchID) > 0 THEN
        
        UPDATE tbl_book_copies
        SET book_copies_No_Of_Copies = book_copies_No_Of_Copies - 1
        WHERE book_copies_BookID = NEW.book_loans_BookID
        AND book_copies_BranchID = NEW.book_loans_BranchID;
    END IF;
END$$

DELIMITER ;

-- Set delimiter for procedure
DELIMITER $$

-- Create procedure to fetch branch details
CREATE PROCEDURE fetch_branch_details()
BEGIN
    -- Declare variables for branch details
    DECLARE branch_id INT;
    DECLARE branch_name VARCHAR(100);
    DECLARE done INT DEFAULT FALSE;

    -- Declare cursor for selecting branch details
    DECLARE branch_cursor CURSOR FOR
    SELECT library_branch_BranchID, library_branch_BranchName
    FROM tbl_library_branch;

    -- Error handling for cursor
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;

    -- Create temporary table to store branch details
    CREATE TEMPORARY TABLE IF NOT EXISTS temp_branch_details (
        BranchID INT,
        BranchName VARCHAR(100)
    );

    -- Open the cursor
    OPEN branch_cursor;

    -- Start fetching branch details
    branch_loop: LOOP
        FETCH branch_cursor INTO branch_id, branch_name;

        -- Check if cursor has fetched all rows
        IF done THEN
            LEAVE branch_loop;
        END IF;

        -- Insert fetched branch details into temporary table
        INSERT INTO temp_branch_details (BranchID, BranchName) 
        VALUES (branch_id, branch_name);
    END LOOP;

    -- Close the cursor
    CLOSE branch_cursor;

    -- Select data from temporary table
    SELECT * FROM temp_branch_details;

    -- Drop temporary table
    DROP TEMPORARY TABLE IF EXISTS temp_branch_details;
END$$

DELIMITER ;
