CREATE TABLE IF NOT EXISTS tbl_transaction_log (
    transaction_ID INT AUTO_INCREMENT PRIMARY KEY,
    transaction_type ENUM('BORROW', 'RETURN') NOT NULL,
    transaction_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    book_id INT NOT NULL,
    branch_id INT NOT NULL,
    card_no INT NOT NULL,
    date_out DATE NOT NULL,
    due_date DATE NOT NULL,
    CONSTRAINT fk_log_book FOREIGN KEY (book_id) REFERENCES tbl_book(book_BookID) 
        ON UPDATE CASCADE ON DELETE CASCADE,
    CONSTRAINT fk_log_branch FOREIGN KEY (branch_id) REFERENCES tbl_library_branch(library_branch_BranchID) 
        ON UPDATE CASCADE ON DELETE CASCADE,
    CONSTRAINT fk_log_card FOREIGN KEY (card_no) REFERENCES tbl_borrower(borrower_CardNo) 
        ON UPDATE CASCADE ON DELETE CASCADE
);

// 2)Optimized Transaction with Logging
-- Start a transaction
START TRANSACTION;

-- Step 1: Acquire a lock on the book copy to prevent simultaneous modification
SELECT book_copies_No_Of_Copies INTO @available_copies
FROM tbl_book_copies 
WHERE book_copies_BookID = 1 AND book_copies_BranchID = 1
FOR UPDATE;

-- Step 2: Check availability before proceeding
IF @available_copies > 0 THEN

    -- Step 3: Reduce book copies
    UPDATE tbl_book_copies 
    SET book_copies_No_Of_Copies = book_copies_No_Of_Copies - 1
    WHERE book_copies_BookID = 1 AND book_copies_BranchID = 1;

    -- Step 4: Insert into book loans table
    INSERT INTO tbl_book_loans (book_loans_BookID, book_loans_BranchID, 
        book_loans_CardNo, book_loans_DateOut, book_loans_DueDate)
    VALUES (1, 1, 123, '2024-05-03', '2024-06-03');

    -- Step 5: Log the borrowing transaction
    INSERT INTO tbl_transaction_log (transaction_type, transaction_time, 
        book_id, branch_id, card_no, date_out, due_date)
    VALUES ('BORROW', NOW(), 1, 1, 123, '2024-05-03', '2024-06-03');

    -- Step 6: Commit transaction
    COMMIT;

ELSE
    -- If no copies are available, rollback transaction
    ROLLBACK;
END IF;
